name: Deploy to EC2

on:
  push:
    branches:
      - master


jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip' # caching pip dependencies
      - run: pip install -r requirements.txt

      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          exit-code: 1
          severity: 'HIGH,CRITICAL'

      - name: Create .env File
        run: |
          touch .env
          echo "HOSTNAME=${{ secrets.HOSTNAME }}" >> .env
          echo "WEATHER_DATABASE=${{ secrets.WEATHER_DATABASE }}" >> .env
          echo "USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "PORT=${{ secrets.DB_PORT }}" >> .env
          echo "API_KEY=${{ secrets.OPENWEATHER_API_KEY }}" >> .env

      - name: Create Deployment Archive
        run: |
          zip -r app.zip .

      - name: Transfer Code to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_IP_ADDRESS }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: app.zip
          target: /home/ubuntu/

      - name: Deploy and Setup Application
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_IP_ADDRESS }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            
            sudo apt update
            sudo apt install -y python3-pip python3-venv python3-dev libpq-dev build-essential
         
            mkdir -p /home/ubuntu/codes/app
            cd /home/ubuntu/codes/app
            
            rm -rf ./*
            
            unzip /home/ubuntu/app.zip -d ./
            
            rm  -rf /home/ubuntu/app.zip
            
          
            python3 -m venv venv
            source venv/bin/activate
            
            
            pip install -r requirements.txt
            pip install gunicorn
            
          
            sudo tee /etc/systemd/system/flask-app.service > /dev/null <<EOF
            [Unit]
            Description=Gunicorn Flask Application
            After=network.target

            [Service]
            User=ubuntu
            Group=ubuntu
            WorkingDirectory=/home/ubuntu/codes/app
            EnvironmentFile=/home/ubuntu/codes/app/.env
            ExecStart=/home/ubuntu/codes/app/venv/bin/gunicorn \
                --workers 3 \
                --bind 0.0.0.0:5000 \
                --access-logfile - \
                --error-logfile - \
                app:app

            [Install]
            WantedBy=multi-user.target
            EOF
            
        
            sudo systemctl daemon-reload
            sudo systemctl enable flask-app
            sudo systemctl restart flask-app
            
           
            sudo systemctl status flask-app

     

